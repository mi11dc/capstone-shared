import { Injectable } from '@angular/core';
import { HttpParams, HttpHeaders } from '@angular/common/http';
import { retry, shareReplay } from 'rxjs/operators';
import { environment } from '../../../environments/environment';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class ApiService {
    http;
    constructor(http) {
        this.http = http;
    }
    get(path, queryParms, baseUrl = environment.baseURL) {
        let httpParams;
        let httpHeaders = new HttpHeaders();
        Object.keys(queryParms).forEach(key => {
            if (key === 'headers') {
                Object.keys(queryParms.headers).forEach(hkey => {
                    if (queryParms.headers[hkey] !== null && queryParms.headers[hkey] !== '') {
                        // tslint:disable-next-line: quotemark
                        httpHeaders = httpHeaders.set(hkey, queryParms.headers[hkey]);
                    }
                });
            }
            else {
                httpParams = this.getQueryParams(queryParms);
            }
        });
        return this.http
            .get(`${baseUrl + path}`, {
            headers: httpHeaders,
            observe: 'response',
            params: httpParams
        })
            .pipe(retry(1), shareReplay());
    }
    getSingle(path, httpHeaders = {}, baseUrl = environment.baseURL) {
        return this.http.get(`${baseUrl + path}`, { headers: httpHeaders, observe: 'response' }).pipe(retry(1), shareReplay());
    }
    post(path, requestObject, httpHeaders = {}, baseUrl = environment.baseURL) {
        return this.http
            .post(`${baseUrl + path}`, requestObject, {
            headers: httpHeaders,
            observe: 'response'
        })
            .pipe(retry(1), shareReplay());
    }
    postFormEncoded(path, requestObject, httpHeaders = {}, baseUrl = environment.baseURL) {
        const body = new URLSearchParams();
        if (requestObject) {
            Object.keys(requestObject).forEach(obj => {
                if (requestObject[obj] !== null || requestObject[obj] !== undefined) {
                    body.set(obj, requestObject[obj]);
                }
            });
        }
        return this.http
            .post(`${baseUrl + path}`, body.toString(), { headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, observe: 'response' })
            .pipe(retry(1), shareReplay());
    }
    uploadFile(path, requestObject, baseUrl = environment.baseURL) {
        return this.http
            .post(`${baseUrl + path}`, requestObject, {
            reportProgress: true,
            observe: 'events'
        })
            .pipe(retry(1), shareReplay());
    }
    put(path, requestObject, httpHeaders = {}, baseUrl = environment.baseURL) {
        return this.http
            .put(`${baseUrl + path}`, requestObject, {
            headers: httpHeaders,
            observe: 'response'
        })
            .pipe(retry(1), shareReplay());
    }
    delete(path, httpHeaders = {}, baseUrl = environment.baseURL) {
        return this.http.delete(`${baseUrl + path}`, { headers: httpHeaders, observe: 'response' }).pipe(shareReplay());
    }
    getQueryParams(queryParams) {
        let queryString = new HttpParams();
        Object.keys(queryParams).forEach(param => {
            if (param !== 'headers') {
                if (queryParams[param] !== null && queryParams[param] !== '') {
                    const value = queryParams[param].toString().trim();
                    queryString = queryString.append(param, value);
                }
            }
        });
        return queryString;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.6", ngImport: i0, type: ApiService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.6", ngImport: i0, type: ApiService });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.6", ngImport: i0, type: ApiService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,